openapi: 3.0.3
info: 
  title: Unit Selection API
  description: A simple API to make server side of unit selection
  version: "1.0"

servers:
  - url: https:///127.0.0.1:3000/HW2_db

paths:
  /login:
    post:
      description: login user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: objectId
                  username: 
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        "400":
          description: invalid username or password or require password and username
          $ref: "#/components/responses/BadRequest"
        "404":
          description: user not found
          $ref: "#/components/responses/NotFound"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
  /course:
    post:
      description: create a new course
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovedCourse'
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovedCourse'
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
  /course/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    put:
      description: update a course
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovedCourse'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          description: course was not found
          $ref: "#/components/responses/NotFound"
        "400":
          description: Invalid parameters for update
          $ref: "#/components/responses/BadRequest"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
    delete:
      description: delete a course
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
    get:
      description: get a course
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApprovedCourse'
        "403":
          $ref: "#/components/responses/Permission"
        "404":
          $ref: "#/components/responses/NotFound"
        
  /courses:
    get:
      description: gets all courses
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApprovedCourse'
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
  /students:
    get:
      description: get all students
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
  /student/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    get:
      description: get a student user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
    put:
      description: update a student
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          description: student was not found
          $ref: "#/components/responses/NotFound"
        "403":
          description: You can't update other students information.
          $ref: "#/components/responses/Permission"
        "400":
          description: Invalid parameters for update
          $ref: "#/components/responses/BadRequest"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
    delete:
      description: delete a student
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: problem from server side
          $ref: "#/components/responses/ServerError"
  
  /Professors:
    get:
      description: gets all professors
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
        "401":
          $ref: "#/components/responses/Unauthorized"
  /Professor/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    get:
      description: get a professor user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      description: update a professor profile
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/Professor:
    post:
      description: create a new professor user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Professor'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/Professor/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    delete:
      description: delete professor user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      description: get professor user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      description: update professor user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/Professors:
    get:
      description: gets all professors users
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/student:
    post:
      description: create new student user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Student'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/student/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    delete:
      description: delete a student user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      description: get student user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      description: update student user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/students:
    get:
      description: get all students
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/manager:
    post:
      description: create a new manager user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Manager'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/manager/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    delete:
      description: delete a manager user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      description: get a manager user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manager'
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      description: update a manager user
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manager'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /admin/managers:
    get:
      description: get all managers
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Manager'
        "401":
          $ref: "#/components/responses/Unauthorized"
components:
  responses:
    Success:
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
    Create:
      description: created
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
    
    ServerError:
      description: server can't fullfil the request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    BadRequest:
      description: request tht they are not valid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Permission:
      description: forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFound:
      description: resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        username: 
          type : string
          uniqueItems: true
        email:
          type: string
        phone_number:
          type: string
        password:
          type: string
      required:
        - username
        - password
        - email
      
    ITManager:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
    EducationalManager:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            college:
              type: string
    Student:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            grade:
              type: string
            entryYear:
              type: number
            entryTerm:
              type: number
            average: 
              type: number
            college:
              type: string
            field:
              type: string
    Professor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            college:
              type: string
            field:
              type: number
            degree:
              type: number
    ApprovedCourse:
      type: object
      properties:
        name:
          type: string
        prerequisite:
          type: array
          items:
            type: ObjectId
            $ref: '#/components/schemas/ApprovedCourse'
        requirement:
          type: array
          items:
            type: ObjectId
            $ref: '#/components/schemas/ApprovedCourse'
        Unit:
          type: number
        field:
          type: string

    TermCourse:
      allOf:
        - $ref: '#/components/schemas/ApprovedCourse'
        - type: object
          properties:
            classDate:
              type: string
            classTime:
              type: string
            examDate:
              type: string
            examTime:
              type: string
            examLocation:
              type: string
            teacher:
              type: ObjectId
              - $ref: '#/components/schemas/Professor'
            capacity:
              type: number
            term:
              type: string
  securitySchemes:
    JWTAuth:
      description: json web token
      scheme: bearer
      type: http